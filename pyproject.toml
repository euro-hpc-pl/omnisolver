[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "omnisolver"
description = "Extensible framework for creating and running Binary Quadratic Model solvers and samplers."
authors = [
    "Konrad Jałowiecki <dexter2206@gmail.com>",
    "Łukasz Pawela <lpawela@iitis.pl>"
]
license = "Apache-2.0"
readme = "README.md"
classifiers = [
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Physics"
]
homepage = "https://github.com/euro-hpc-pl/omnisolver"
repository = "https://github.com/euro-hpc-pl/omnisolver"
documentation = "https://omnisolver.readthedocs.io"
version = "0.0.0" # Dummy value, version is set dynamically

[tool.poetry.dependencies]
python = ">=3.8"
dimod  = ">= 0.9.10"
numpy = ">= 1.19.4"
pluggy = ">= 0.13.1"
PyYAML = ">= 5.3.1"
pandas = ">= 1.1.4"

[tool.poetry.group.docs.dependencies]
sphinx = {version = "~=6.1.3", optional = true}
sphinx-autoapi = { version = "~=2.0.1", optional = true}
pydata-sphinx-theme = { version = "~=0.13.1", optional = true}
sphinx-term = {version = "~=0.1", optional = true}
myst-parser = {version = "~=1.0.0", optional = true}

[tool.poetry.group.test.dependencies]
pytest = {version = "~=6.1.2", optional = true}
pytest-mock = {version = "~=3.3.1", optional = true}
pytest-cov = {version = "~=2.12.1", optional = true, extras = ["toml"]}

[tool.poetry.scripts]
omnisolver = "omnisolver.common.cmd:main"

[tool.poetry.plugins."omnisolver"]
random = "omnisolver.random"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "(?P<base>\\d+\\.\\d+\\.\\d+)"

[tool.black]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
)/
'''

[tools.coverage.run]
relative_files = true

[tool.mypy]
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "pluggy"
ignore_missing_imports = true
